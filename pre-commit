#!/usr/bin/python
import subprocess
from subprocess import Popen, PIPE
import re
import os

regExpFilename = '.gitlftracking'

gitEnvCmd = [ 'git', 'lfs', 'env' ]
gitLocalWorkingDir = 'LocalWorkingDir'
localWorkingDir = ''
statusCmd = [ 'git', 'status', '--porcelain' ]
addedFileFlags = [ ' A ', 'A ' ]
fileRegExps = [ ]
gitResetCmd = [ 'git', 'reset' ]
lfsTrackCmd = ' git lfs track '
gitAddCmd = [ 'git', 'add' ]
addedChangedAttributesCmd = [ 'git', 'add', '.gitattributes' ]
filesToBeTrackedByLfs = []

class LfsTracker:
    def __init__(self):
        """
        Read the configuration file containing RegExp entries for automatic LFS tracking.
        """
        try:
            gitEnv = Popen(gitEnvCmd, stdout=PIPE, stderr=PIPE)
            gitEnvResult = gitEnv.stdout.readlines()
            for line in gitEnvResult:
                if line.startswith(gitLocalWorkingDir):
                    localWorkingDir = (re.split('=', line)[1])[:-1]
                    break
            filenameFullPath = localWorkingDir + os.sep + regExpFilename
            regExpFile = open(filenameFullPath, 'r')
            for line in regExpFile.readlines():
                fileRegExps.append(line[:-1])
            print "LFS RegExp Array: " + str(fileRegExps)
        except Exception as e:
            print "LFS open file "+ filenameFullPath +" failed: "
            print e
            print "LFS tracking hook cannot track new files"
            exit(1)

    def track(self):
        """
        Searches for git added files which match the RegExps and triggers LFS tracking.
        """
        pwd = os.getcwd()
        gitWorkTree = 'GIT_WORK_TREE="' + pwd + '"'
        gitStatus = Popen(statusCmd, stdout=PIPE, stderr=PIPE)
        gitStatusResult = gitStatus.stdout.readlines()
        for line in gitStatusResult:
            line = line[:-1]
            fileNameIndex = line.rfind(' ')
            fileName = line[fileNameIndex+1:]
            for fileFlag in addedFileFlags:
                if line.startswith(fileFlag):
                    for fileRegExp in fileRegExps:
                        if re.match(fileRegExp, fileName):
                            try:
                                self.__trackTheFile(gitWorkTree, fileName)
                            except Exception as e:
                                print "LFS tracking failed: "
                                print e
    
        if 0 < len(filesToBeTrackedByLfs):
            subprocess.check_call(addedChangedAttributesCmd)

    def __trackTheFile(self, gitWorkTree, fileName):
        """
        Ensures a given filename is tracked by LFS.
        
        It is required to reset the file before LFS Track command and add it back
        after the LFS Track command.

        @param gitWorkTree git working tree used by LFS for a verification if the file belongs to the current repo.
        @param fileName the filename to be tracked by LFS
        """
        print "LFS Tracking: " + fileName
        filesToBeTrackedByLfs.append(fileName)
        subprocess.check_call(gitResetCmd + [ fileName ])
        subprocess.check_call(gitWorkTree + lfsTrackCmd + fileName, shell=True)
        subprocess.check_call(gitAddCmd + [ fileName ])

if __name__ == "__main__":
    print "LFS tracking hook started"
    try:
        tracker = LfsTracker()
        tracker.track()
    except Exception as e:
        print "LFS tracking hook failed: "
        print e
        exit(1)
    
    print "LFS tracking hook ended"
    exit(0)
